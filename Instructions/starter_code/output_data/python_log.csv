# IPython log file

# Dependencies and Setup
get_ipython().run_line_magic('matplotlib', 'notebook')
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests
import datetime
import openweathermapy.core as owm
import pytemperature
import csv
import os
get_ipython().run_line_magic('logstart', '-o -q output_data/python_log.csv')
get_ipython().run_line_magic('logoff', '')

# Import API key
from api_keys import api_key

# Incorporated citipy to determine city based on latitude and longitude
from citipy import citipy

# Output File (CSV)
output_data_file = "output_data/cities.csv"
csvfile = "cities.csv"
output_path = os.path.join("output_data", "cities.csv")


# Range of latitudes and longitudes
lat_range = (-90, 90)
lng_range = (-180, 180)
# citi = cities
units = "imperial"
url = "http://api.openweathermap.org/data/2.5/weather?"
owm.utils.load_config
settings = {"units": units, "APPID": api_key}
query_url = f"{url}appid={api_key}&units={units}&q="

# set up lists to hold reponse info
weather_response = []
cityList = []
citNam = []
lat = []
temp = []
humi = []
eSea = []
eGnd = []
clouds = []
wind = []
code = []

# for citi in cities:
#     weather_response = owm.find_city(citi, **settings)
#     selection = ('id','coord.lat','coord.lon')
#     data = weather_response(selection)
#     cityList.append(data)
    
# Loop through the list of cities and perform a request for data on each
# for city in cities:
#     response = requests.get(query_url + city).json()
#     lat.append(response['coord']['lat'])
#     temp.append(response['main']['temp'])
#     cloud.append(response['clouds']['all'])
#     wind.append(response['wind']['speed'])
# logger.disabled = True
# logger.disabled = False

# Write json responses to 'data.json'
with open('output_data/data.json', 'w', encoding='utf-8') as f:
#     Begin loggin with output to 'python_log.csv'
    get_ipython().run_line_magic('logon', '-o -q')
    for city in cities:
        response = requests.get(query_url + city).json()
        json.dump(response, f, ensure_ascii=False, indent=4)  # Write json responses to 'data.json'
        response1=response
        try:    
            print(f"For the city named {(response1['name'])}, ID Number-{(response1['id'])}: LAT={(response1['coord']['lat'])} WIND={(response1['wind']['speed'])} HUMIDITY={(response['main']['humidity'])} TEMP={(response1['main']['temp_max'])} CLOUDINESS={(response1['clouds']['all'])}")
            response1=[]
            citNam.append(response['name']) #and citNam.append(cnt)
            code.append(response['id'])
            lat.append(response['coord']['lat'])
            temp.append(response['main']['temp_max'])
            humi.append(response['main']['humidity'])
            clouds.append(response['clouds']['all'])
            wind.append(response['wind']['speed'])
            eSea.append(response['main']['sea_level'])  # Not used in DataFrame
            eGnd.append(response['main']['grnd_level']) # Not used in DataFrame
        except KeyError:
    #             print(f"The NAME is NO GOOD")
                next
    get_ipython().run_line_magic('logstop', '')
# EXTRA STUFF **************                                                    
# loop throught the list of units and append them to cityList list
# for citi in cities:
#     query_url = f"{url}appid={api_key}&q={citi}"
#     weather_response = requests.get(query_url)
#     response= weather_response.json()
#     lat.append(response['coord']['lat'])
#     temp.append(response['main']['temp'])
#     cloud.append(response['clouds']['all'])
#     wind.append(response['wind']['speed'])
#     cityList.append(weather_json)
    
#     for city in cities:
#     response = requests.get(query_url + city).json()
#     selection = ('name','id','coord.lat','coord.lon',"main.temp", 'main.temp_max',"main.humidity", "wind.speed",'clouds.all')
# Dependencies and Setup
get_ipython().run_line_magic('matplotlib', 'notebook')
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import requests
import datetime
import openweathermapy.core as owm
import pytemperature
import csv
import os
get_ipython().run_line_magic('logstart', '-o -q output_data/python_log.csv')
get_ipython().run_line_magic('logoff', '')

# Import API key
from api_keys import api_key

# Incorporated citipy to determine city based on latitude and longitude
from citipy import citipy

# Output File (CSV)
output_data_file = "output_data/cities.csv"
csvfile = "cities.csv"
output_path = os.path.join("output_data", "cities.csv")


# Range of latitudes and longitudes
lat_range = (-90, 90)
lng_range = (-180, 180)
# List for holding lat_lngs and cities
lat_lngs = []
cities = []
countries = []


# Create a set of random lat and lng combinations
lats = np.random.uniform(low=-90.000, high=90.000, size=1500)
lngs = np.random.uniform(low=-180.000, high=180.000, size=1500)
lat_lngs = zip(lats, lngs)

# Identify nearest city for each lat, lng combination
for lat_lng in lat_lngs:
    city = citipy.nearest_city(lat_lng[0], lat_lng[1]).city_name
    country = citipy.nearest_city(lat_lng[0], lat_lng[1]).country_code

# If the city is unique, then add it to a our cities list
    if city not in cities:
        cities.append(city)
        countries.append(country)
# Print 'Cities' list to 'cities.csv'
with open(output_path, 'w', newline='') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    csvwriter.writerow(cities)
        
# Print the city count to confirm sufficient count
len(cities)
#[Out]# 630
# citi = cities
units = "imperial"
url = "http://api.openweathermap.org/data/2.5/weather?"
owm.utils.load_config
settings = {"units": units, "APPID": api_key}
query_url = f"{url}appid={api_key}&units={units}&q="

# set up lists to hold reponse info
weather_response = []
cityList = []
citNam = []
lat = []
temp = []
humi = []
eSea = []
eGnd = []
clouds = []
wind = []
code = []

# for citi in cities:
#     weather_response = owm.find_city(citi, **settings)
#     selection = ('id','coord.lat','coord.lon')
#     data = weather_response(selection)
#     cityList.append(data)
    
# Loop through the list of cities and perform a request for data on each
# for city in cities:
#     response = requests.get(query_url + city).json()
#     lat.append(response['coord']['lat'])
#     temp.append(response['main']['temp'])
#     cloud.append(response['clouds']['all'])
#     wind.append(response['wind']['speed'])
# logger.disabled = True
# logger.disabled = False

# Write json responses to 'data.json'
with open('output_data/data.json', 'w', encoding='utf-8') as f:
#     Begin loggin with output to 'python_log.csv'
    get_ipython().run_line_magic('logon', '-o -q')
    for city in cities:
        response = requests.get(query_url + city).json()
        json.dump(response, f, ensure_ascii=False, indent=4)  # Write json responses to 'data.json'
        response1=response
        try:    
            print(f"For the city named {(response1['name'])}, ID Number-{(response1['id'])}: LAT={(response1['coord']['lat'])} WIND={(response1['wind']['speed'])} HUMIDITY={(response['main']['humidity'])} TEMP={(response1['main']['temp_max'])} CLOUDINESS={(response1['clouds']['all'])}")
            response1=[]
            citNam.append(response['name']) #and citNam.append(cnt)
            code.append(response['id'])
            lat.append(response['coord']['lat'])
            temp.append(response['main']['temp_max'])
            humi.append(response['main']['humidity'])
            clouds.append(response['clouds']['all'])
            wind.append(response['wind']['speed'])
            eSea.append(response['main']['sea_level'])  # Not used in DataFrame
            eGnd.append(response['main']['grnd_level']) # Not used in DataFrame
        except KeyError:
    #             print(f"The NAME is NO GOOD")
                next
    get_ipython().run_line_magic('logstop', '')
# EXTRA STUFF **************                                                    
# loop throught the list of units and append them to cityList list
# for citi in cities:
#     query_url = f"{url}appid={api_key}&q={citi}"
#     weather_response = requests.get(query_url)
#     response= weather_response.json()
#     lat.append(response['coord']['lat'])
#     temp.append(response['main']['temp'])
#     cloud.append(response['clouds']['all'])
#     wind.append(response['wind']['speed'])
#     cityList.append(weather_json)
    
#     for city in cities:
#     response = requests.get(query_url + city).json()
#     selection = ('name','id','coord.lat','coord.lon',"main.temp", 'main.temp_max',"main.humidity", "wind.speed",'clouds.all')
